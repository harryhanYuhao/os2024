#!/bin/bash

BOLD="\033[1m"
RED="\033[31m"
EMPH="${RED}${BOLD}"
RESET="\033[0m"

CACHEFILEPATH="$HOME/.cache/runqemuCache"
CACHEFILEDIR="$HOME/.cache/"
CACHE_ROOTFS_PREFIX="ROOTFS_PATH="
CACHE_BZIMAGE_PREFIX="BZIMAGE_PATH="

ROOTFS_PATH=""
BZIMAGE_PATH=""

SEARCH_PATH="`echo ~` `echo ~+` /disk/scratch/`whoami` /disk/scratch/operating_systems/`whoami`"

record_pathName() {
	if [[ -f $CACHEFILEPATH ]]; then
		rm $CACHEFILEPATH
	fi

	if [[ ! -d $CACHEFILEDIR ]]; then
		mkdir -p $CACHEFILEDIR
	fi

	if [[ -z $ROOTFS_PATH ]]; then
		echo "ROOTFS_PATH Not defined!"
		echo "It is probably a bug with the script"
		exit 1
	fi

	if [[ -z $BZIMAGE_PATH ]]; then
		echo "BZIMAGE_PATH Not defined!"
		echo "It is probably a bug with the script"
		exit 1
	fi

	echo "${CACHE_ROOTFS_PREFIX}${ROOTFS_PATH}" >> $CACHEFILEPATH
	echo "${CACHE_BZIMAGE_PREFIX}${BZIMAGE_PATH}" >> $CACHEFILEPATH
	echo "Recording filepath to $CACHEFILEPATH"
}

get_filePath() {
	if [[ -f $CACHEFILEPATH ]] && [[ -z $NOT_USE_CACHE ]]; then
		ROOTFS_PATH=$(cat $CACHEFILEPATH | grep $CACHE_ROOTFS_PREFIX | sed "s/^${CACHE_ROOTFS_PREFIX}//") 
		BZIMAGE_PATH=$(cat $CACHEFILEPATH | grep $CACHE_BZIMAGE_PREFIX | sed "s/^${CACHE_BZIMAGE_PREFIX}//") 

		if [[ -n $ROOTFS_PATH ]] || [[ -n $BZIMAGE_PATH ]]; then
			echo "Found filepath from $CACHEFILEPATH"
		fi

		if [[ -f $ROOTFS_PATH ]]; then
			echo "Rootfs: $ROOTFS_PATH"
		else
			echo -e "$ROOTFS_PATH is ${EMPH}not a file! ${RESET}}"
			unset ROOTFS_PATH
		fi
		if [[ -f $BZIMAGE_PATH ]]; then
			echo "Bzimage: $BZIMAGE_PATH"
		else
			echo -e "$BZIMAGE_PATH is ${EMPH}not a file! ${RESET}}"
			unset BZIMAGE_PATH
		fi

	fi

	if [[ -z $ROOTFS_PATH ]] || [[ -z $BZIMAGE_PATH ]]; then
		echo "Trying to find ROOTFS_PATH"
		ROOTFS_PATH=$(find `echo ${SEARCH_PATH}` -name 'Yesterday' -prune -o -name "debian.qcow2" -print | tail -n 1)
		echo "Trying to find BZIMAGE_PATH"
		BZIMAGE_PATH=$(find ${SEARCH_PATH} -name 'Yesterday' -prune -o -wholename "*x86_64*bzImage" -print | tail -n 1)
		record_pathName
	fi

	if [[ -z $ROOTFS_PATH ]] || [[ ! -f $ROOTFS_PATH ]]; then
		echo "debian.qcow2 not found"
		NOTFOUND_IMG=1
	fi

	if [[ -z $BZIMAGE_PATH ]] || [[ ! -f $BZIMAGE_PATH ]]; then
		echo "bzImage not found"
		NOTFOUND_IMG=1
	fi

	if [[ $NOTFOUND_IMG ]]; then
		echo "You should probably cd to /disk/scratch/<uun>?"
		exit 1
	fi

	echo ""
	echo "#######################"
	echo ""
	echo -e "${EMPH}Found: ${RESET}" 
	echo "${BZIMAGE_PATH}"
	echo -e "${EMPH}Found: ${RESET}" 
	echo "${ROOTFS_PATH}"
	echo ""
	
	echo "CONTINUE? Press enter to Continue, N to quit"
	
	read -r input 
	if [[ $input == "N" ]]; then
		exit 0
	fi
}

Qemu_No_Port () {
	# it set ROOTFS_PATH and BZIMAGE_PATH 
	get_filePath	

	qemu-system-x86_64 -m 4G -smp 4 \
		-drive file="$ROOTFS_PATH" \
	       	-kernel "$BZIMAGE_PATH" \
	       	-append "root=/dev/sda1 console=ttyS0" -nographic
}

Random_Port_Num(){
	PORT_NUM=$(($RANDOM % 63510 + 2024))
}

Get_Port_Num(){
	if [[ -z $PORT_NUM ]]; then
		Random_Port_Num
	elif [[ $PORT_NUM -lt 2024 ]]; then
		echo "you shall use a port number greater than 2024, auto-assigning port number "
		Random_Port_Num
	elif [[ $PORT_NUM -gt 65535 ]]; then
		echo "Port number shall be smaller then 65535. Auto-assigning a port number"
		Random_Port_Num
	fi

	# get an available port 
	while [[ -n $(lsof -i:${PORT_NUM}) ]]; do
		echo "trying port number ${PORT_NUM} ..."
		Random_Port_Num
	done
}

Qemu_Port(){
	# sets the $PORT_NUM variable
	Get_Port_Num
	# it set ROOTFS_PATH and BZIMAGE_PATH 
	get_filePath

	echo "	qemu-system-x86_64 -m 4G -smp 4 \ "
	echo "		-drive file=$ROOTFS_PATH \ "
	echo "	       	-kernel $BZIMAGE_PATH \ "
	echo "	       	-append "root=/dev/sda1 console=ttyS0" -nographic \ "
	echo "		-S -gdb tcp::${PORT_NUM} "

	echo -e "port number assigned: ${EMPH} ${PORT_NUM} ${RESET}"
	echo "Waiting for gdb..."
	echo "Help on GDB: gdb vmlinux"
	echo "(gdb) target remote localhost:${PORT_NUM}"
	

	qemu-system-x86_64 -m 4G -smp 4 \
		-drive file=$ROOTFS_PATH \
	       	-kernel $BZIMAGE_PATH \
	       	-append "root=/dev/sda1 console=ttyS0" -nographic \
		-S -gdb tcp::${PORT_NUM}
}

Help () {
	echo "NAME"
	echo "		runqemu - a qemu shortcut"
	echo ""
	echo "SYNOPSIS"
	echo "		runqemu [-gn] [port number]"
	echo ""
	echo "DESCRIPTION"
	echo "		runqemu is written for UoE operation system class"
	echo "		It detects the debiam.qcow2 disk image and bzImage"
	echo "		presented in current or child of current directory"	   
	echo "		and correctly run the qemu command to simualte the"
        echo "		kernel."
	echo "		If port number is presented, it will try to use the "
	echo "		given port number to connect to gdb."
	echo ""
	echo "-g: "
	echo "		connects with gdb. Auto assign a port"		
	echo "-n: "
	echo "		not use cache: find the path of rootfs and "
	echo "		rootfs again"
}

################
# Start of execution
################

while [ $# -gt 0 ]; do
	case $1 in
		-n)
			NOT_USE_CACHE="yes"
			shift
			;;
		-g)
			RUN_QEMU_PORT="yes"
			shift
			;;
		[0-9]*)
			RUN_QEMU_PORT="yes"
			PORT_NUM=$1
			shift
			;;
		*)
			Help
			exit 1
			;;
	esac
done

if [[ -n $RUN_QEMU_PORT ]]; then
	Qemu_Port
else 
	Qemu_No_Port
fi
